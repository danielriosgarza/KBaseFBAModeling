############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
# Passes on URLError, timeout, and BadStatusLine exceptions.
#     See: 
#     http://docs.python.org/2/library/urllib2.html
#     http://docs.python.org/2/library/httplib.html
#
############################################################

try:
    import json
except ImportError:
    import sys
    sys.path.append('simplejson-2.3.3')
    import simplejson as json
    
import urllib2, httplib, urlparse
from urllib2 import URLError, HTTPError

_CT = 'content-type'
_AJ = 'application/json'
_URL_SCHEME = frozenset(['http', 'https']) 

class ServerError(Exception):

    def __init__(self, name, code, message):
        self.name = name
        self.code = code
        self.message = message

    def __str__(self):
        return self.name + ': ' + str(self.code) + '. ' + self.message

class fbaModelServices:

    def __init__(self, url = None, timeout = 30 * 60):
        if url is None:
            raise ValueError('A url is required')
        scheme, _, _, _, _, _ = urlparse.urlparse(url)
        if scheme not in _URL_SCHEME:
            raise ValueError(url + " isn't a valid http url")
        self.url = url
        self.timeout = int(timeout)
        if self.timeout < 1:
            raise ValueError('Timeout value must be at least 1 second')

    def get_models(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_models',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_fbas(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_fbas',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_gapfills(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_gapfills',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_gapgens(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_gapgens',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_reactions(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_reactions',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_compounds(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_compounds',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_media(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_media',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_biochemistry(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_biochemistry',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_ETCDiagram(self, input):

        arg_hash = { 'method': 'fbaModelServices.get_ETCDiagram',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def import_probanno(self, input):

        arg_hash = { 'method': 'fbaModelServices.import_probanno',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def genome_object_to_workspace(self, input):

        arg_hash = { 'method': 'fbaModelServices.genome_object_to_workspace',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def genome_to_workspace(self, input):

        arg_hash = { 'method': 'fbaModelServices.genome_to_workspace',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def add_feature_translation(self, input):

        arg_hash = { 'method': 'fbaModelServices.add_feature_translation',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def genome_to_fbamodel(self, input):

        arg_hash = { 'method': 'fbaModelServices.genome_to_fbamodel',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def import_fbamodel(self, input):

        arg_hash = { 'method': 'fbaModelServices.import_fbamodel',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def genome_to_probfbamodel(self, input):

        arg_hash = { 'method': 'fbaModelServices.genome_to_probfbamodel',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def export_fbamodel(self, input):

        arg_hash = { 'method': 'fbaModelServices.export_fbamodel',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def export_object(self, input):

        arg_hash = { 'method': 'fbaModelServices.export_object',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def export_genome(self, input):

        arg_hash = { 'method': 'fbaModelServices.export_genome',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def adjust_model_reaction(self, input):

        arg_hash = { 'method': 'fbaModelServices.adjust_model_reaction',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def adjust_biomass_reaction(self, input):

        arg_hash = { 'method': 'fbaModelServices.adjust_biomass_reaction',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def addmedia(self, input):

        arg_hash = { 'method': 'fbaModelServices.addmedia',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def export_media(self, input):

        arg_hash = { 'method': 'fbaModelServices.export_media',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def runfba(self, input):

        arg_hash = { 'method': 'fbaModelServices.runfba',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def export_fba(self, input):

        arg_hash = { 'method': 'fbaModelServices.export_fba',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def import_phenotypes(self, input):

        arg_hash = { 'method': 'fbaModelServices.import_phenotypes',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def simulate_phenotypes(self, input):

        arg_hash = { 'method': 'fbaModelServices.simulate_phenotypes',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def export_phenotypeSimulationSet(self, input):

        arg_hash = { 'method': 'fbaModelServices.export_phenotypeSimulationSet',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def integrate_reconciliation_solutions(self, input):

        arg_hash = { 'method': 'fbaModelServices.integrate_reconciliation_solutions',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def queue_runfba(self, input):

        arg_hash = { 'method': 'fbaModelServices.queue_runfba',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def queue_gapfill_model(self, input):

        arg_hash = { 'method': 'fbaModelServices.queue_gapfill_model',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def queue_gapgen_model(self, input):

        arg_hash = { 'method': 'fbaModelServices.queue_gapgen_model',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def queue_wildtype_phenotype_reconciliation(self, input):

        arg_hash = { 'method': 'fbaModelServices.queue_wildtype_phenotype_reconciliation',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def queue_reconciliation_sensitivity_analysis(self, input):

        arg_hash = { 'method': 'fbaModelServices.queue_reconciliation_sensitivity_analysis',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def queue_combine_wildtype_phenotype_reconciliation(self, input):

        arg_hash = { 'method': 'fbaModelServices.queue_combine_wildtype_phenotype_reconciliation',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def jobs_done(self, input):

        arg_hash = { 'method': 'fbaModelServices.jobs_done',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def check_job(self, input):

        arg_hash = { 'method': 'fbaModelServices.check_job',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def run_job(self, input):

        arg_hash = { 'method': 'fbaModelServices.run_job',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def set_cofactors(self, input):

        arg_hash = { 'method': 'fbaModelServices.set_cofactors',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def find_reaction_synonyms(self, input):

        arg_hash = { 'method': 'fbaModelServices.find_reaction_synonyms',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def find_paths(self, input):

        arg_hash = { 'method': 'fbaModelServices.find_paths',
                     'params': [input],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')




        
